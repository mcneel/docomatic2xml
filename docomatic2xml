#!/usr/bin/env python
# -*- coding: utf-8 -*-

import re
import sys
import Levenshtein

known_keywords = [
    'description',  # summary
    'details',      # summary

    'parameters',   # param
    'input',        # param
    'output',       # param
    'properties',   # param

    'returns',      # returns
    'result',       # returns

    'remarks',      # remarks
    'comments',     # remarks
    'restrictions', # remarks
    'notes',        # remarks
    'note well',    # remarks

    'example',      # example

    'see also'      # seealso
]

aliases = {
    'description': ['description', 'details'],
    # 'details':     ['details'],
    'parameters':  ['parameters', 'input', 'output', 'properties'],
    'returns':     ['returns', 'result'],
    'remarks':     ['remarks', 'comments', 'restrictions', 'notes', 'note well'],
    'example':     ['example'],
    'see also':    ['see also']
}

def dist(str1, str2):
    a = Levenshtein.distance(str1, str2)
    return 1-(float(a)/max(len(str1),len(str2)))

def match(keyword):
    score = 0
    matched_k = None
    for k in known_keywords:
        d = dist(k, keyword)
        if d > score:
                score = d
                matched_k = k
    return matched_k, score

def alias(keyword):
    for k in aliases.keys():
        if keyword in aliases[k]:
            return k
    return None

def main():
    files = sys.argv[1:]

    for fname in files:
        # print fname

        with open(fname) as f:
            content = f.readlines()

        content = [x.rstrip() for x in content]

        # uncomment to rewrite the original file, instead of printing to STDOUT
        #sys.stdout = open(fname, 'w')

        process_lines(content)

def process_lines(content):
    block = Block()
    in_block = False

    for l in content:
        # print l

        # replace tabs with 2 spaces
        l = l.replace('\t', '  ')

        if not in_block:
            # multiline block comment => /* */
            m = re.match(r'^( *)/\*(.*)', l) # match /*
            if m:
                if '*/' in l: # no one-liners
                    print l
                    continue
                if l.lstrip().startswith('/**'): # ignore /** blocks
                    print l
                    continue
                # start a new "block" comment block
                if len(block) > 0:
                    block.pprint()
                block = Block(True)
                in_block = True
                block.lines.append(l)
                continue

            # normal multiline comment => //
            # only look for these if we've not in a /* */ block
            m = re.match(r'^( *)//(.*)', l) # match //
            if m:
                if m.group(2).startswith('/'): # fixup existing /// comments
                    if re.search('^ *///[^ /]', l):
                        print l.replace('///', '/// ')
                        continue
                else:
                    block.lines.append(l)
                    continue

        elif in_block:
            # end block comment
            if '*/' in l:
                # something after the */
                if len(l.strip()) > 2 and not l.rstrip().endswith('*/'):
                    raise Exception(l)
                block.lines.append(l)
                # end current block and flush
                block.pprint()
                block = Block()
                in_block = False
            else:
                block.lines.append(l)
            continue

        # not a comment line
        # print block (if we've just finished one) and then print line
        if len(block) > 0:
            block.pprint()
        block = Block() # reset comment block
        print l

    # in case the file ended with a comment block
    if len(block) > 0:
        block.pprint()

class Block:
    def __init__(self, asterix=False):
        self.lines = []
        self.indent = 0
        self.asterix = asterix # comment block uses /* */

    def __len__(self):
        return len(self.lines) if self.lines else 0

    def strip(self):
        """Strips comment characters (/*, */, //) and sets indent for block."""
        if not self.lines:
            return
        new_lines = []
        # look for /* on first line
        m = re.match(r'^( *)\/\*(.*)', self.lines[0])
        if m:
            self.indent = len(m.group(1))
            if m.group(2).strip():
                new_lines.append(m.group(2))
            for l in self.lines[1:-1]:
                new_lines.append(l.strip().lstrip('*').lstrip()) # TODO: preserve indent
            if self.lines[-1].strip() != '*/':
                if self.lines[-1].rstrip().endswith('*/'):
                    # print 'WOWOW: ', self.lines[-1]
                    new_lines.append(self.lines[-1].rstrip()[:-2].strip())
                else:
                    raise Exception(self.lines[-1])
        else:
            m = re.match(r'^( *)//(.*)', self.lines[0])
            if m:
                self.indent = len(m.group(1))
            for l in self.lines:
                new_lines.append(l.strip().lstrip('/').lstrip()) # TODO: preserve indent

        # self.indent = 0 if self.indent < 0
        #
        # for i in range(len(new_lines)):
        #     if self.indent and len(new_lines[i]) - len(new_lines[i].lstrip()) > self.indent:
        #         new_lines[i] = new_lines[i][self.indent:]
        #     else:
        #         new_lines[i] = new_lines[i].lstrip

        self.original = self.lines
        self.lines = new_lines


    def pprint(self):
        # strip comment chars and set indent
        self.strip()

        if self.indent > 10: # comments with large indents are better left alone
            for l in self.original:
                # print ' ' * self.indent + '//' + l.rstrip()
                print l.rstrip()
        elif len(self) == 1: # don't try to parse one line comments
            # print ' ' * self.indent + '///' + self.lines[0].rstrip()
            print self.original[0].rstrip()
        else: # try to parse doc-o-matic syntax
            store = {}
            current_key = None
            orphans = []
            # allowed_keys = ['description', 'details', 'parameters', 'input', 'returns', 'remarks', 'comments', 'example', 'see also']
            for l in self.lines:
                # if not l.strip():
                #     continue
                #print ' ' * self.indent + '/// ' + l
                if l.strip().endswith(':'):
                    tmp_key = l.strip()[:-1].lower()
                    k, d = match(tmp_key) # fuzzy wuzzy was a bear!
                    # if k in allowed_keys:
                    if d and d <= 1.0 and d > 0.6:
                        # print 'DEBUG:', k, d
                        current_key = alias(k)
                        if current_key in store:
                            store[current_key].append('')
                        else:
                            store[current_key] = []
                        continue
                    else:
                        if re.match('^[a-z ]+$', l.strip()) and len(l.strip().split()) < 5:
                            print ' ' * self.indent + '// TODODOC: not a recognized keyword: "{}"'.format(l)
                if current_key:
                    # preserve indent
                    # indent = max(len(l) - len(l.lstrip()) - self.indent, 0)
                    # l = l.strip() if indent < 3 else l.rstrip()[2:]
                    # indent = (indent - self.indent) if indent > self.indent else 0
                    store[current_key].append(l)
                else:
                    orphans.append(l)

            # not a doc-o-matic comment?
            if not store:
                for l in self.original:
                    print l
                return

            # doc-o-matic comments found, but some lines were parsed before a
            # qualifying keyword was found
            # print them with a note to remind me to come back later
            if orphans:
                first = 0
                # print first orphaned line normally, if it's not text, e.g. "// --------"
                if not re.search('[a-zA-Z0-9]', orphans[0]):
                    print ' ' * self.indent + '// ' + l
                    first = 1
                if len(orphans) > first:
                    print ' ' * self.indent + '// TODODOC: text found above first keyword'
                    for l in orphans[first:]:
                        print ' ' * self.indent + '// ' + l

            ###########################
            # parse doc-o-matic comment

            # print store
            # Description => <summary>
            if 'description' in store:
                print ' ' * self.indent + '/// <summary>'
                for l in store['description']:
                    print ' ' * self.indent + '/// ' + l
                store.pop('description')
                print ' ' * self.indent + '/// </summary>'
            # Parameters => <param>...
            if 'parameters' in store:
                process_params(store['parameters'], self.indent)
                store.pop('parameters')
            # Returns => <returns>
            if 'returns' in store:
                if len(store['returns']) == 1: # one-liners
                    print ' ' * self.indent + '/// <returns>' + store['returns'][0] + '</returns>'
                else:
                    print ' ' * self.indent + '/// <returns>'
                    for l in store['returns']:
                        print ' ' * self.indent + '/// ' + l
                    print ' ' * self.indent + '/// </returns>'
                store.pop('returns')
            # Remarks => <remarks>
            if 'remarks' in store:
                print ' ' * self.indent + '/// <remarks>'
                for l in store['remarks']:
                    print ' ' * self.indent + '/// ' + l
                print ' ' * self.indent + '/// </remarks>'
                store.pop('remarks')
            # Example => <example>
            if 'example' in store:
                print ' ' * self.indent + '/// <example>'
                print ' ' * self.indent + '/// <code>'
                for l in store['example']:
                    print ' ' * self.indent + '/// ' + l
                print ' ' * self.indent + '/// </code>'
                print ' ' * self.indent + '/// </example>'
                store.pop('example')
            # See also => <seealso>...
            if 'see also' in store:
                for l in store['see also']:
                    print ' ' * self.indent + '/// <seealso cref="{}"/>'.format(l)
                store.pop('see also')

            # no string left behind...
            if len(store) > 0:
                raise Exception('LEFTOVERS >>> ' + str(store))

def process_params(lines, indent):
    if not lines:
        return

    if len(lines) == 1 and re.match(r'none.?', lines[0].strip().lower()):
        return

    params = []
    orphans = []
    for l in lines: # another loop!
        name = desc = None
        m = re.match(r'^([a-zA-Z0-9_]+) +- *(.*)', l.strip())
        if m:
            name = m.group(1)
            desc = m.group(2)
        else:
            m = re.match(r'^([a-zA-Z0-9_]+) *(\[[inout\/I]+\]) *(-|:|=)? *(.*)', l.strip())
            if m:
                name = m.group(1)
                desc = '{} {}'.format(m.group(2), m.group(4))
            else:
                m = re.match(r'^([inout\/\[\]]+) *([a-zA-Z0-9_]+) *(-) *(.*)', l.strip())
                if m:
                    name = m.group(2)
                    desc = '{} {}'.format(m.group(1), m.group(4))
                else:
                    m = re.match(r'^([a-zA-Z0-9_]+) *(-|:|=)? *(\[[inout\/I]+\]) *(.*)?', l.strip())
                    if m:
                        name = m.group(1)
                        desc = '{} {}'.format(m.group(3), m.group(4))
                    else:
                        m = re.match(r'^[a-zA-Z0-9\_]+$', l.strip())
                        if m:
                            name = m.group(0)
                            desc = ''


        if not (name or desc):
            if len(params) == 0:
                if orphans or l.strip(): # only save orphaned line if it's not empty OR we already have others
                    orphans.append(l)
                # print ' ' * indent + '// TODODOC: error parsing parameters "{}"'.format(l)
                # raise Exception(l)
            else:
                params.append(l)
            continue

        if params:
            params[-1] += '</param>'
        params.append('<param name="{}">{}'.format(name, desc))

    if orphans:
        print ' ' * indent + '// TODODOC: orphaned parameter description'
        for o in orphans:
            print ' ' * indent + '// ' + o

    # print params, if we got any
    if params:
        params[-1] += '</param>'
        for p in params:
            print ' ' * indent + '/// ' + p


if __name__ == '__main__':
    main()
